
max10_full_feature.elf:     file format elf32-littlenios2
max10_full_feature.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800160

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x00000160 memsz 0x00000160 flags r-x
    LOAD off    0x00002160 vaddr 0x00800160 paddr 0x00800160 align 2**12
         filesz 0x00001108 memsz 0x00001108 flags r-x
    LOAD off    0x00003268 vaddr 0x00801268 paddr 0x008013c8 align 2**12
         filesz 0x00000160 memsz 0x00000160 flags rw-
    LOAD off    0x00003528 vaddr 0x00801528 paddr 0x00801528 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-
    LOAD off    0x00004000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000010bc  00800160  00800160  00002160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  0080121c  0080121c  0000321c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000160  00801268  008013c8  00003268  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00801528  00801528  00003528  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00801640  00801640  00004020  2**0
                  CONTENTS
  7 .ufm_flash_data 00000000  01080000  01080000  00004020  2**0
                  CONTENTS
  8 .cpu_ram      00000000  01104180  01104180  00004020  2**0
                  CONTENTS
  9 .BeMicro_Max10_serial_flash_controller_0 00000000  01109000  01109000  00004020  2**0
                  CONTENTS
 10 .comment      00000023  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000003c0  00000000  00000000  00004048  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   000042a6  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c0  00000000  00000000  000086ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001a46  00000000  00000000  00009f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000006d8  00000000  00000000  0000b9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000184a  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00001934  00000000  00000000  0000d8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000010  00000000  00000000  0000f20c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00000130  00000000  00000000  0000f220  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  00010d61  2**0
                  CONTENTS, READONLY
 21 .cpu          00000003  00000000  00000000  00010d64  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  00010d67  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  00010d68  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  00010d69  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  00010d6d  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  00010d71  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   0000000b  00000000  00000000  00010d75  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    0000000b  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   0000000b  00000000  00000000  00010d8b  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 0000000b  00000000  00000000  00010d96  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 0000003b  00000000  00000000  00010da1  2**0
                  CONTENTS, READONLY
 32 .jdi          0000669c  00000000  00000000  00010ddc  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     000b5bb0  00000000  00000000  00017478  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
00800160 l    d  .text	00000000 .text
0080121c l    d  .rodata	00000000 .rodata
00801268 l    d  .rwdata	00000000 .rwdata
00801528 l    d  .bss	00000000 .bss
00801640 l    d  .sdram	00000000 .sdram
01080000 l    d  .ufm_flash_data	00000000 .ufm_flash_data
01104180 l    d  .cpu_ram	00000000 .cpu_ram
01109000 l    d  .BeMicro_Max10_serial_flash_controller_0	00000000 .BeMicro_Max10_serial_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 E:/home/inouema/work/altera_max10/BeMicroMax10_full_feature_sw/software/max10_full_feature_bsp//obj/HAL/src/crt0.o
00800198 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00801368 l     O .rwdata	0000003c modular_adc
00801268 l     O .rwdata	00000100 ufm_flash
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_modular_adc.c
00800528 l     F .text	00000058 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008010f0 l     F .text	0000006c udivmodsi4
00801538 g     O .bss	00000004 alt_instruction_exception_handler
00800438 g     F .text	00000020 adc_stop
008002ac g     F .text	0000002c alt_main
00801540 g     O .bss	00000100 alt_irq
008013c8 g       *ABS*	00000000 __flash_rwdata_start
008002d8 g     F .text	00000038 alt_putstr
00801000 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
01104000 g     F .entry	0000000c __reset
008004fc g     F .text	00000018 adc_interrupt_disable
00800000 g       *ABS*	00000000 __flash_exceptions_start
0080153c g     O .bss	00000004 errno
008003cc g     F .text	00000064 altera_modular_adc_init
0080152c g     O .bss	00000004 alt_argv
008093a4 g       *ABS*	00000000 _gp
00800ba8 g     F .text	00000030 alt_onchip_flash_poll_for_status_write_passed
01080000 g       *ABS*	00000000 __alt_mem_ufm_flash_data
00800e20 g     F .text	00000074 alt_find_dev
008010ac g     F .text	00000028 memcpy
00800480 g     F .text	00000014 adc_set_mode_run_continuously
00801008 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0080120c g     F .text	00000008 .hidden __udivsi3
00800a8c g     F .text	00000030 alt_onchip_flash_poll_for_status_erase_passed
008013b0 g     O .rwdata	00000008 altera_onchip_flash_list
01104000 g       *ABS*	00000000 __alt_mem_cpu_ram
008013a8 g     O .rwdata	00000008 altera_modular_adc_list
00800da0 g     F .text	00000004 alt_dcache_flush
00800abc g     F .text	000000ec alt_onchip_flash_erase_block
00801640 g       *ABS*	00000000 __bss_end
00800f98 g     F .text	00000068 alt_iic_isr_register
008005e4 g     F .text	00000014 adc_wait_for_interrupt
00800f80 g     F .text	00000018 alt_ic_irq_enabled
00801534 g     O .bss	00000004 alt_irq_active
011040fc g     F .exceptions	00000060 alt_irq_handler
00800468 g     F .text	00000018 adc_set_mode_run_once
00800da4 g     F .text	00000004 alt_dcache_flush_all
008013c8 g       *ABS*	00000000 __ram_rwdata_end
00801268 g       *ABS*	00000000 __ram_rodata_end
008013a4 g     O .rwdata	00000004 jtag_uart_0
00800458 g     F .text	00000010 adc_start
00801214 g     F .text	00000008 .hidden __umodsi3
00801640 g       *ABS*	00000000 end
0110415c g     F .exceptions	00000024 alt_instruction_exception_entry
01000000 g       *ABS*	00000000 __alt_stack_pointer
00800360 g     F .text	00000034 altera_avalon_jtag_uart_write
00800664 g     F .text	00000044 alt_onchip_flash_get_info
00800160 g     F .text	0000003c _start
00800330 g     F .text	00000030 alt_sys_init
01109000 g       *ABS*	00000000 __alt_mem_BeMicro_Max10_serial_flash_controller_0
00801268 g       *ABS*	00000000 __ram_rwdata_start
0080121c g       *ABS*	00000000 __ram_rodata_start
0080107c g     F .text	00000030 memcmp
00801640 g       *ABS*	00000000 __alt_stack_base
008004e8 g     F .text	00000014 adc_interrupt_enable
008005f8 g     F .text	0000006c alt_onchip_flash_read
00800da8 g     F .text	00000078 alt_dev_llist_insert
008013bc g     O .rwdata	00000008 alt_flash_dev_list
00801528 g       *ABS*	00000000 __bss_start
0080019c g     F .text	00000018 main
00801528 g     O .bss	00000004 alt_envp
00800394 g     F .text	00000038 alt_adc_word_read
008013b8 g     O .rwdata	00000004 alt_errno
00800a60 g     F .text	0000002c alt_onchip_flash_poll_for_status_to_go_idle
0080115c g     F .text	00000054 .hidden __divsi3
00800828 g     F .text	00000238 altera_onchip_flash_init
0080121c g       *ABS*	00000000 __flash_rodata_start
00800310 g     F .text	00000020 alt_irq_init
00801530 g     O .bss	00000004 alt_argc
01104020 g       .exceptions	00000000 alt_irq_entry
00800bd8 g     F .text	000001c8 alt_onchip_flash_write_block
01104020 g       *ABS*	00000000 __ram_exceptions_start
00800efc g     F .text	00000004 alt_ic_isr_register
008013c8 g       *ABS*	00000000 _edata
008006a8 g     F .text	00000180 alt_onchip_flash_write
00801640 g       *ABS*	00000000 _end
00800e94 g     F .text	00000050 alt_flash_open_dev
008005d4 g     F .text	00000010 adc_interrupt_asserted
01104180 g       *ABS*	00000000 __ram_exceptions_end
00800f40 g     F .text	00000040 alt_ic_irq_disable
00800514 g     F .text	00000014 adc_clear_interrupt_status
00800ee4 g     F .text	00000014 alt_flash_close_dev
008011b0 g     F .text	0000005c .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00800000 g       *ABS*	00000000 __alt_mem_sdram
00800430 g     F .text	00000008 altera_modular_adc_open
0110400c g       .entry	00000000 _exit
008010d4 g     F .text	0000001c strlen
00800494 g     F .text	00000054 adc_recalibrate
00800ef8 g     F .text	00000004 alt_icache_flush_all
008013c4 g     O .rwdata	00000004 alt_priority_mask
00800f00 g     F .text	00000040 alt_ic_irq_enable
008001b4 g     F .text	000000f8 alt_load
00800580 g     F .text	00000054 alt_adc_register_callback



Disassembly of section .entry:

01104000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104004:	08405814 	ori	at,at,352
    jmp r1
 1104008:	0800683a 	jmp	at

0110400c <_exit>:
	...

Disassembly of section .exceptions:

01104020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1104044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040fc0 	call	11040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000706 	br	11040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1104094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1104098:	110415c0 	call	110415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 110409c:	1000021e 	bne	r2,zero,11040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 11040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 11040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 11040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 11040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 11040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 11040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040f8:	ef80083a 	eret

011040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040fc:	defffe04 	addi	sp,sp,-8
 1104100:	dfc00115 	stw	ra,4(sp)
 1104104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 110410c:	04002034 	movhi	r16,128
 1104110:	84055004 	addi	r16,r16,5440

  active = alt_irq_pending ();

  do
  {
    i = 0;
 1104114:	0005883a 	mov	r2,zero
    mask = 1;
 1104118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	190a703a 	and	r5,r3,r4
 1104120:	28000b26 	beq	r5,zero,1104150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1104124:	100490fa 	slli	r2,r2,3
 1104128:	8085883a 	add	r2,r16,r2
 110412c:	10c00017 	ldw	r3,0(r2)
 1104130:	11000117 	ldw	r4,4(r2)
 1104134:	183ee83a 	callr	r3
 1104138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 110413c:	203ff51e 	bne	r4,zero,1104114 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xffffb114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1104140:	dfc00117 	ldw	ra,4(sp)
 1104144:	dc000017 	ldw	r16,0(sp)
 1104148:	dec00204 	addi	sp,sp,8
 110414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1104150:	18c7883a 	add	r3,r3,r3
      i++;
 1104154:	10800044 	addi	r2,r2,1

    } while (1);
 1104158:	003ff006 	br	110411c <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xffffb11c>

0110415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 110415c:	d0a06517 	ldw	r2,-32364(gp)
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1104160:	200b883a 	mov	r5,r4
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1104164:	10000326 	beq	r2,zero,1104174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1104168:	013fffc4 	movi	r4,-1
 110416c:	000d883a 	mov	r6,zero
 1104170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1104174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 1104178:	0005883a 	mov	r2,zero
 110417c:	f800283a 	ret

Disassembly of section .text:

00800160 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800160:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800164:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800168:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80016c:	d6a4e914 	ori	gp,gp,37796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800170:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800174:	10854a14 	ori	r2,r2,5416

    movhi r3, %hi(__bss_end)
  800178:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80017c:	18c59014 	ori	r3,r3,5696

    beq r2, r3, 1f
  800180:	10c00326 	beq	r2,r3,800190 <_start+0x30>

0:
    stw zero, (r2)
  800184:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800188:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80018c:	10fffd36 	bltu	r2,r3,800184 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7184>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800190:	08001b40 	call	8001b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800194:	08002ac0 	call	8002ac <alt_main>

00800198 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800198:	003fff06 	br	800198 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7198>

0080019c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  80019c:	01002034 	movhi	r4,128
 */

#include "sys/alt_stdio.h"

int main()
{ 
  8001a0:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  8001a4:	21048704 	addi	r4,r4,4636
 */

#include "sys/alt_stdio.h"

int main()
{ 
  8001a8:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  8001ac:	08002d80 	call	8002d8 <alt_putstr>

  /* Event loop never exits. */
  while (1);
  8001b0:	003fff06 	br	8001b0 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f71b0>

008001b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8001b4:	deffff04 	addi	sp,sp,-4
  8001b8:	01002034 	movhi	r4,128
  8001bc:	01402034 	movhi	r5,128
  8001c0:	dfc00015 	stw	ra,0(sp)
  8001c4:	21049a04 	addi	r4,r4,4712
  8001c8:	2944f204 	addi	r5,r5,5064

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8001cc:	2140061e 	bne	r4,r5,8001e8 <alt_load+0x34>
  8001d0:	01004434 	movhi	r4,272
  8001d4:	01402034 	movhi	r5,128
  8001d8:	21100804 	addi	r4,r4,16416
  8001dc:	29400004 	addi	r5,r5,0
  8001e0:	2140141e 	bne	r4,r5,800234 <alt_load+0x80>
  8001e4:	00000d06 	br	80021c <alt_load+0x68>
  8001e8:	00c02034 	movhi	r3,128
  8001ec:	18c4f204 	addi	r3,r3,5064
  8001f0:	00bfff04 	movi	r2,-4
  8001f4:	1907c83a 	sub	r3,r3,r4
  8001f8:	1886703a 	and	r3,r3,r2
  8001fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
  800200:	10fff326 	beq	r2,r3,8001d0 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f71d0>
  800204:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
  800208:	39c00017 	ldw	r7,0(r7)
  80020c:	110d883a 	add	r6,r2,r4
  800210:	10800104 	addi	r2,r2,4
  800214:	31c00015 	stw	r7,0(r6)
  800218:	003ff906 	br	800200 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7200>
  80021c:	01002034 	movhi	r4,128
  800220:	01402034 	movhi	r5,128
  800224:	21048704 	addi	r4,r4,4636
  800228:	29448704 	addi	r5,r5,4636

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80022c:	2140121e 	bne	r4,r5,800278 <alt_load+0xc4>
  800230:	00000d06 	br	800268 <alt_load+0xb4>
  800234:	00c04434 	movhi	r3,272
  800238:	18d06004 	addi	r3,r3,16768
  80023c:	00bfff04 	movi	r2,-4
  800240:	1907c83a 	sub	r3,r3,r4
  800244:	1886703a 	and	r3,r3,r2
  800248:	0005883a 	mov	r2,zero
  {
    while( to != end )
  80024c:	10fff326 	beq	r2,r3,80021c <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f721c>
  800250:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
  800254:	39c00017 	ldw	r7,0(r7)
  800258:	110d883a 	add	r6,r2,r4
  80025c:	10800104 	addi	r2,r2,4
  800260:	31c00015 	stw	r7,0(r6)
  800264:	003ff906 	br	80024c <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f724c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800268:	0800da40 	call	800da4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  80026c:	dfc00017 	ldw	ra,0(sp)
  800270:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  800274:	0800ef81 	jmpi	800ef8 <alt_icache_flush_all>
  800278:	00c02034 	movhi	r3,128
  80027c:	18c49a04 	addi	r3,r3,4712
  800280:	00bfff04 	movi	r2,-4
  800284:	1907c83a 	sub	r3,r3,r4
  800288:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  80028c:	0005883a 	mov	r2,zero
  {
    while( to != end )
  800290:	10fff526 	beq	r2,r3,800268 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7268>
  800294:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
  800298:	39c00017 	ldw	r7,0(r7)
  80029c:	110d883a 	add	r6,r2,r4
  8002a0:	10800104 	addi	r2,r2,4
  8002a4:	31c00015 	stw	r7,0(r6)
  8002a8:	003ff906 	br	800290 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7290>

008002ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8002ac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8002b0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8002b4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8002b8:	08003100 	call	800310 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8002bc:	08003300 	call	800330 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8002c0:	d1206317 	ldw	r4,-32372(gp)
  8002c4:	d1606217 	ldw	r5,-32376(gp)
  8002c8:	d1a06117 	ldw	r6,-32380(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  8002cc:	dfc00017 	ldw	ra,0(sp)
  8002d0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  8002d4:	080019c1 	jmpi	80019c <main>

008002d8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  8002d8:	defffe04 	addi	sp,sp,-8
  8002dc:	dc000015 	stw	r16,0(sp)
  8002e0:	dfc00115 	stw	ra,4(sp)
  8002e4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  8002e8:	08010d40 	call	8010d4 <strlen>
  8002ec:	01002034 	movhi	r4,128
  8002f0:	2104e904 	addi	r4,r4,5028
  8002f4:	800b883a 	mov	r5,r16
  8002f8:	100d883a 	mov	r6,r2
  8002fc:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
  800300:	dfc00117 	ldw	ra,4(sp)
  800304:	dc000017 	ldw	r16,0(sp)
  800308:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
  80030c:	08003601 	jmpi	800360 <altera_avalon_jtag_uart_write>

00800310 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800310:	deffff04 	addi	sp,sp,-4
  800314:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  800318:	08010000 	call	801000 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80031c:	00800044 	movi	r2,1
  800320:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800324:	dfc00017 	ldw	ra,0(sp)
  800328:	dec00104 	addi	sp,sp,4
  80032c:	f800283a 	ret

00800330 <alt_sys_init>:
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( SPI_ACCELEROMETER, spi_accelerometer);
    ALTERA_AVALON_SPI_INIT ( SPI_AD5681, spi_AD5681);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC, modular_adc);
  800330:	01002034 	movhi	r4,128
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800334:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( SPI_ACCELEROMETER, spi_accelerometer);
    ALTERA_AVALON_SPI_INIT ( SPI_AD5681, spi_AD5681);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC, modular_adc);
  800338:	2104da04 	addi	r4,r4,4968
  80033c:	000b883a 	mov	r5,zero
  800340:	01800184 	movi	r6,6
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800344:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( SPI_ACCELEROMETER, spi_accelerometer);
    ALTERA_AVALON_SPI_INIT ( SPI_AD5681, spi_AD5681);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC, modular_adc);
  800348:	08003cc0 	call	8003cc <altera_modular_adc_init>
    ALTERA_ONCHIP_FLASH_INIT ( UFM_FLASH, ufm_flash);
  80034c:	01002034 	movhi	r4,128
  800350:	21049a04 	addi	r4,r4,4712
    BEMICRO_MAX10_SERIAL_FLASH_CONTROLLER_INIT ( BEMICRO_MAX10_SERIAL_FLASH_CONTROLLER_0, BeMicro_Max10_serial_flash_controller_0);
    I2C_OPENCORES_INIT ( I2C_ADT7420, i2c_ADT7420);
}
  800354:	dfc00017 	ldw	ra,0(sp)
  800358:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SPI_INIT ( SPI_ACCELEROMETER, spi_accelerometer);
    ALTERA_AVALON_SPI_INIT ( SPI_AD5681, spi_AD5681);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC, modular_adc);
    ALTERA_ONCHIP_FLASH_INIT ( UFM_FLASH, ufm_flash);
  80035c:	08008281 	jmpi	800828 <altera_onchip_flash_init>

00800360 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  800360:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  800364:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
  800368:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  80036c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  800370:	2980072e 	bgeu	r5,r6,800390 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  800374:	38c00037 	ldwio	r3,0(r7)
  800378:	18ffffec 	andhi	r3,r3,65535
  80037c:	183ffc26 	beq	r3,zero,800370 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7370>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  800380:	28c00007 	ldb	r3,0(r5)
  800384:	20c00035 	stwio	r3,0(r4)
  800388:	29400044 	addi	r5,r5,1
  80038c:	003ff806 	br	800370 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7370>

  return count;
}
  800390:	f800283a 	ret

00800394 <alt_adc_word_read>:
    alt_u32 word_length = len;
    alt_u32* dest_buf = dest_ptr;
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
  800394:	28000b26 	beq	r5,zero,8003c4 <alt_adc_word_read+0x30>
  800398:	0005883a 	mov	r2,zero
  80039c:	2149c83a 	sub	r4,r4,r5
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  8003a0:	11800626 	beq	r2,r6,8003bc <alt_adc_word_read+0x28>
  8003a4:	2907883a 	add	r3,r5,r4
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
  8003a8:	18c00037 	ldwio	r3,0(r3)
  8003ac:	28c00015 	stw	r3,0(r5)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
  8003b0:	10800044 	addi	r2,r2,1
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
  8003b4:	29400104 	addi	r5,r5,4
  8003b8:	003ff906 	br	8003a0 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f73a0>
    }

    return 0;
  8003bc:	0005883a 	mov	r2,zero
  8003c0:	f800283a 	ret
    alt_u32 base = sample_store_base;
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
    {
    	return -EINVAL;
  8003c4:	00bffa84 	movi	r2,-22
       dest_buf++;
    }

    return 0;

}
  8003c8:	f800283a 	ret

008003cc <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  8003cc:	defffb04 	addi	sp,sp,-20
  8003d0:	dc400215 	stw	r17,8(sp)
  8003d4:	2823883a 	mov	r17,r5
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  8003d8:	d1600104 	addi	r5,gp,-32764

}


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
  8003dc:	dc800315 	stw	r18,12(sp)
  8003e0:	dc000115 	stw	r16,4(sp)
  8003e4:	dfc00415 	stw	ra,16(sp)
  8003e8:	2025883a 	mov	r18,r4
  8003ec:	3021883a 	mov	r16,r6
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
  8003f0:	0800da80 	call	800da8 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
  8003f4:	88000816 	blt	r17,zero,800418 <altera_modular_adc_init+0x4c>
  8003f8:	80000716 	blt	r16,zero,800418 <altera_modular_adc_init+0x4c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
  8003fc:	01802034 	movhi	r6,128
  800400:	d8000015 	stw	zero,0(sp)
  800404:	8809883a 	mov	r4,r17
  800408:	800b883a 	mov	r5,r16
  80040c:	31814a04 	addi	r6,r6,1320
  800410:	900f883a 	mov	r7,r18
  800414:	0800efc0 	call	800efc <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
  800418:	dfc00417 	ldw	ra,16(sp)
  80041c:	dc800317 	ldw	r18,12(sp)
  800420:	dc400217 	ldw	r17,8(sp)
  800424:	dc000117 	ldw	r16,4(sp)
  800428:	dec00504 	addi	sp,sp,20
  80042c:	f800283a 	ret

00800430 <altera_modular_adc_open>:
alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
    alt_modular_adc_dev *dev = NULL;

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
  800430:	d1600104 	addi	r5,gp,-32764
  800434:	0800e201 	jmpi	800e20 <alt_find_dev>

00800438 <adc_stop>:
    return dev;
}

void adc_stop(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
  800438:	20c00037 	ldwio	r3,0(r4)
  80043c:	00bfff84 	movi	r2,-2
  800440:	1884703a 	and	r2,r3,r2
  800444:	20800035 	stwio	r2,0(r4)
  800448:	20800037 	ldwio	r2,0(r4)
  80044c:	1080004c 	andi	r2,r2,1
  800450:	103ffd1e 	bne	r2,zero,800448 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7448>
}
  800454:	f800283a 	ret

00800458 <adc_start>:

void adc_start(int sequencer_base)
{
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
  800458:	20800037 	ldwio	r2,0(r4)
  80045c:	10800054 	ori	r2,r2,1
  800460:	20800035 	stwio	r2,0(r4)
  800464:	f800283a 	ret

00800468 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
  800468:	20c00037 	ldwio	r3,0(r4)
  80046c:	00bffc44 	movi	r2,-15
  800470:	1884703a 	and	r2,r3,r2
  800474:	10800094 	ori	r2,r2,2
  800478:	20800035 	stwio	r2,0(r4)
  80047c:	f800283a 	ret

00800480 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
  800480:	20c00037 	ldwio	r3,0(r4)
  800484:	00bffc44 	movi	r2,-15
  800488:	1884703a 	and	r2,r3,r2
  80048c:	20800035 	stwio	r2,0(r4)
  800490:	f800283a 	ret

00800494 <adc_recalibrate>:
}

void adc_recalibrate(int sequencer_base)
{
  800494:	defffd04 	addi	sp,sp,-12
  800498:	dc000015 	stw	r16,0(sp)
  80049c:	2021883a 	mov	r16,r4
  8004a0:	dfc00215 	stw	ra,8(sp)
  8004a4:	dc400115 	stw	r17,4(sp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
  8004a8:	24400037 	ldwio	r17,0(r4)
    adc_stop(sequencer_base);
  8004ac:	08004380 	call	800438 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
  8004b0:	80800037 	ldwio	r2,0(r16)
  8004b4:	10800394 	ori	r2,r2,14
  8004b8:	80800035 	stwio	r2,0(r16)
    adc_start(sequencer_base);
  8004bc:	8009883a 	mov	r4,r16
  8004c0:	08004580 	call	800458 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  8004c4:	80800037 	ldwio	r2,0(r16)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
  8004c8:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
  8004cc:	103ffd1e 	bne	r2,zero,8004c4 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f74c4>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
  8004d0:	84400035 	stwio	r17,0(r16)
}
  8004d4:	dfc00217 	ldw	ra,8(sp)
  8004d8:	dc400117 	ldw	r17,4(sp)
  8004dc:	dc000017 	ldw	r16,0(sp)
  8004e0:	dec00304 	addi	sp,sp,12
  8004e4:	f800283a 	ret

008004e8 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
  8004e8:	21004004 	addi	r4,r4,256
  8004ec:	20800037 	ldwio	r2,0(r4)
  8004f0:	10800054 	ori	r2,r2,1
  8004f4:	20800035 	stwio	r2,0(r4)
  8004f8:	f800283a 	ret

008004fc <adc_interrupt_disable>:
}

void adc_interrupt_disable(int sample_store_base)
{
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
  8004fc:	21004004 	addi	r4,r4,256
  800500:	20c00037 	ldwio	r3,0(r4)
  800504:	00bfff84 	movi	r2,-2
  800508:	1884703a 	and	r2,r3,r2
  80050c:	20800035 	stwio	r2,0(r4)
  800510:	f800283a 	ret

00800514 <adc_clear_interrupt_status>:
}

void adc_clear_interrupt_status(int sample_store_base)
{
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
  800514:	21004104 	addi	r4,r4,260
  800518:	20800037 	ldwio	r2,0(r4)
  80051c:	10800054 	ori	r2,r2,1
  800520:	20800035 	stwio	r2,0(r4)
  800524:	f800283a 	ret

00800528 <alt_adc_irq>:
static void alt_adc_irq(void *context)
{
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
    alt_irq_context cpu_sr = 0;

	if(NULL != dev)
  800528:	20001426 	beq	r4,zero,80057c <alt_adc_irq+0x54>
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
  80052c:	defffd04 	addi	sp,sp,-12
  800530:	dc000015 	stw	r16,0(sp)
  800534:	2021883a 	mov	r16,r4
  800538:	dfc00215 	stw	ra,8(sp)
  80053c:	dc400115 	stw	r17,4(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800540:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800544:	00bfff84 	movi	r2,-2
  800548:	8884703a 	and	r2,r17,r2
  80054c:	1001703a 	wrctl	status,r2
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
  800550:	20800a17 	ldw	r2,40(r4)
  800554:	10000226 	beq	r2,zero,800560 <alt_adc_irq+0x38>
		{
			dev->callback (dev->callback_context);
  800558:	21000b17 	ldw	r4,44(r4)
  80055c:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
  800560:	81000c17 	ldw	r4,48(r16)
  800564:	08005140 	call	800514 <adc_clear_interrupt_status>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800568:	8801703a 	wrctl	status,r17
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
}
  80056c:	dfc00217 	ldw	ra,8(sp)
  800570:	dc400117 	ldw	r17,4(sp)
  800574:	dc000017 	ldw	r16,0(sp)
  800578:	dec00304 	addi	sp,sp,12
  80057c:	f800283a 	ret

00800580 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  800580:	defffe04 	addi	sp,sp,-8
  800584:	dc000015 	stw	r16,0(sp)
  800588:	dfc00115 	stw	ra,4(sp)
    dev->callback         = callback;
  80058c:	21400a15 	stw	r5,40(r4)
    dev->callback_context = context;
  800590:	21800b15 	stw	r6,44(r4)
    dev->sample_store_base = sample_store_base;
  800594:	21c00c15 	stw	r7,48(r4)
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
  800598:	3821883a 	mov	r16,r7
    dev->callback_context = context;
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
	{
                adc_clear_interrupt_status(sample_store_base);
  80059c:	3809883a 	mov	r4,r7
{
    dev->callback         = callback;
    dev->callback_context = context;
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
  8005a0:	28000626 	beq	r5,zero,8005bc <alt_adc_register_callback+0x3c>
	{
                adc_clear_interrupt_status(sample_store_base);
  8005a4:	08005140 	call	800514 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
  8005a8:	8009883a 	mov	r4,r16
	}
	
    
	
    return ;
}
  8005ac:	dfc00117 	ldw	ra,4(sp)
  8005b0:	dc000017 	ldw	r16,0(sp)
  8005b4:	dec00204 	addi	sp,sp,8
    dev->sample_store_base = sample_store_base;
	
	if(NULL != callback)
	{
                adc_clear_interrupt_status(sample_store_base);
		adc_interrupt_enable(sample_store_base);
  8005b8:	08004e81 	jmpi	8004e8 <adc_interrupt_enable>
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
  8005bc:	08004fc0 	call	8004fc <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
  8005c0:	8009883a 	mov	r4,r16
	}
	
    
	
    return ;
}
  8005c4:	dfc00117 	ldw	ra,4(sp)
  8005c8:	dc000017 	ldw	r16,0(sp)
  8005cc:	dec00204 	addi	sp,sp,8
		adc_interrupt_enable(sample_store_base);
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
                adc_clear_interrupt_status(sample_store_base);
  8005d0:	08005141 	jmpi	800514 <adc_clear_interrupt_status>

008005d4 <adc_interrupt_asserted>:
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
}

int adc_interrupt_asserted(int sample_store_base)
{
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
  8005d4:	20804137 	ldwio	r2,260(r4)
  8005d8:	1080004c 	andi	r2,r2,1
}
  8005dc:	0085c83a 	sub	r2,zero,r2
  8005e0:	f800283a 	ret

008005e4 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
  8005e4:	21004104 	addi	r4,r4,260
  8005e8:	20800037 	ldwio	r2,0(r4)
  8005ec:	1080004c 	andi	r2,r2,1
  8005f0:	103ffd26 	beq	r2,zero,8005e8 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f75e8>
}
  8005f4:	f800283a 	ret

008005f8 <alt_onchip_flash_read>:
{
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  8005f8:	20800b17 	ldw	r2,44(r4)
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  8005fc:	defffe04 	addi	sp,sp,-8
  800600:	dc000015 	stw	r16,0(sp)
  800604:	dfc00115 	stw	ra,4(sp)
  800608:	2021883a 	mov	r16,r4
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  80060c:	2880100e 	bge	r5,r2,800650 <alt_onchip_flash_read+0x58>
  800610:	29c7883a 	add	r3,r5,r7
  800614:	10c00e16 	blt	r2,r3,800650 <alt_onchip_flash_read+0x58>
        return -EFAULT;
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  800618:	80800a17 	ldw	r2,40(r16)
  80061c:	3009883a 	mov	r4,r6
  800620:	380d883a 	mov	r6,r7
  800624:	114b883a 	add	r5,r2,r5
  800628:	08010ac0 	call	8010ac <memcpy>

    if (NULL != flash->csr_base) {
  80062c:	80802f17 	ldw	r2,188(r16)
  800630:	1000021e 	bne	r2,zero,80063c <alt_onchip_flash_read+0x44>
    int           offset,
    void          *dest_addr,
    int           length
)
{
    int ret_code = 0;
  800634:	0005883a 	mov	r2,zero
  800638:	00000606 	br	800654 <alt_onchip_flash_read+0x5c>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);

    if (NULL != flash->csr_base) {
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  80063c:	10800037 	ldwio	r2,0(r2)
  800640:	1080010c 	andi	r2,r2,4
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  800644:	103ffb1e 	bne	r2,zero,800634 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7634>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  800648:	00bffec4 	movi	r2,-5
  80064c:	00000106 	br	800654 <alt_onchip_flash_read+0x5c>
    int ret_code = 0;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
        return -EFAULT;
  800650:	00bffc84 	movi	r2,-14
            /* Read failed.  Return error.*/
            ret_code = -EIO;
        }
    }
    return ret_code;
}
  800654:	dfc00117 	ldw	ra,4(sp)
  800658:	dc000017 	ldw	r16,0(sp)
  80065c:	dec00204 	addi	sp,sp,8
  800660:	f800283a 	ret

00800664 <alt_onchip_flash_get_info>:
{
    int ret_code = 0;

    alt_flash_dev* flash = (alt_flash_dev*)fd;

    if (NULL != number_of_regions)
  800664:	30000226 	beq	r6,zero,800670 <alt_onchip_flash_get_info+0xc>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  800668:	20800c17 	ldw	r2,48(r4)
  80066c:	30800015 	stw	r2,0(r6)
    }

    if (!flash->number_of_regions)
  800670:	20800c17 	ldw	r2,48(r4)
  800674:	10000626 	beq	r2,zero,800690 <alt_onchip_flash_get_info+0x2c>
    {
        ret_code = -ENOMEM;
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  800678:	00c00204 	movi	r3,8
  80067c:	18800616 	blt	r3,r2,800698 <alt_onchip_flash_get_info+0x34>
    {
        ret_code = -EFAULT;
    }
    else
    {
        if (NULL != info)
  800680:	28000726 	beq	r5,zero,8006a0 <alt_onchip_flash_get_info+0x3c>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  800684:	21000d04 	addi	r4,r4,52
  800688:	29000015 	stw	r4,0(r5)
  80068c:	00000406 	br	8006a0 <alt_onchip_flash_get_info+0x3c>
        *number_of_regions = flash->number_of_regions;
    }

    if (!flash->number_of_regions)
    {
        ret_code = -ENOMEM;
  800690:	00bffd04 	movi	r2,-12
  800694:	f800283a 	ret
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
    {
        ret_code = -EFAULT;
  800698:	00bffc84 	movi	r2,-14
  80069c:	f800283a 	ret
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
    int ret_code = 0;
  8006a0:	0005883a 	mov	r2,zero
            *info = &flash->region_info[0];
        }
    }

    return ret_code;
}
  8006a4:	f800283a 	ret

008006a8 <alt_onchip_flash_write>:
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  8006a8:	20800b17 	ldw	r2,44(r4)
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  8006ac:	defff204 	addi	sp,sp,-56
  8006b0:	ddc00b15 	stw	r23,44(sp)
  8006b4:	dc800615 	stw	r18,24(sp)
  8006b8:	dfc00d15 	stw	ra,52(sp)
  8006bc:	df000c15 	stw	fp,48(sp)
  8006c0:	dd800a15 	stw	r22,40(sp)
  8006c4:	dd400915 	stw	r21,36(sp)
  8006c8:	dd000815 	stw	r20,32(sp)
  8006cc:	dcc00715 	stw	r19,28(sp)
  8006d0:	dc400515 	stw	r17,20(sp)
  8006d4:	dc000415 	stw	r16,16(sp)
  8006d8:	d9c00215 	stw	r7,8(sp)
  8006dc:	202f883a 	mov	r23,r4
  8006e0:	2825883a 	mov	r18,r5
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  8006e4:	2880430e 	bge	r5,r2,8007f4 <alt_onchip_flash_write+0x14c>
  8006e8:	1145c83a 	sub	r2,r2,r5
  8006ec:	11c04116 	blt	r2,r7,8007f4 <alt_onchip_flash_write+0x14c>
  8006f0:	3027883a 	mov	r19,r6
  8006f4:	25401004 	addi	r21,r4,64
  8006f8:	3829883a 	mov	r20,r7
  8006fc:	2823883a 	mov	r17,r5
  800700:	d8000115 	stw	zero,4(sp)
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  800704:	b8800c17 	ldw	r2,48(r23)
  800708:	d8c00117 	ldw	r3,4(sp)
  80070c:	1880310e 	bge	r3,r2,8007d4 <alt_onchip_flash_write+0x12c>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  800710:	af3ffd17 	ldw	fp,-12(r21)
  800714:	8f002916 	blt	r17,fp,8007bc <alt_onchip_flash_write+0x114>
            (offset < (flash->dev.region_info[i].offset +
  800718:	a8bffe17 	ldw	r2,-8(r21)
  80071c:	e085883a 	add	r2,fp,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  800720:	8880260e 	bge	r17,r2,8007bc <alt_onchip_flash_write+0x114>
  800724:	002d883a 	mov	r22,zero
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  800728:	a8bfff17 	ldw	r2,-4(r21)
  80072c:	b080230e 	bge	r22,r2,8007bc <alt_onchip_flash_write+0x114>
            {
                if ((offset >= current_offset ) &&
  800730:	8f001e16 	blt	r17,fp,8007ac <alt_onchip_flash_write+0x104>
                    (offset < (current_offset +
  800734:	ac000017 	ldw	r16,0(r21)
  800738:	e421883a 	add	r16,fp,r16
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
  80073c:	8c001b0e 	bge	r17,r16,8007ac <alt_onchip_flash_write+0x104>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  800740:	8461c83a 	sub	r16,r16,r17
                    data_to_write = MIN(data_to_write, length);
  800744:	a400010e 	bge	r20,r16,80074c <alt_onchip_flash_write+0xa4>
  800748:	a021883a 	mov	r16,r20
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  80074c:	b9400a17 	ldw	r5,40(r23)
  800750:	9809883a 	mov	r4,r19
  800754:	800d883a 	mov	r6,r16
  800758:	2c4b883a 	add	r5,r5,r17
  80075c:	080107c0 	call	80107c <memcmp>
  800760:	10001b26 	beq	r2,zero,8007d0 <alt_onchip_flash_write+0x128>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  800764:	b8800817 	ldw	r2,32(r23)
  800768:	b809883a 	mov	r4,r23
  80076c:	e00b883a 	mov	r5,fp
  800770:	103ee83a 	callr	r2

                        if (!ret_code)
  800774:	1000181e 	bne	r2,zero,8007d8 <alt_onchip_flash_write+0x130>
                        {
                            ret_code = (*flash->dev.write_block)(
  800778:	b8800917 	ldw	r2,36(r23)
  80077c:	dc000015 	stw	r16,0(sp)
  800780:	b809883a 	mov	r4,r23
  800784:	e00b883a 	mov	r5,fp
  800788:	880d883a 	mov	r6,r17
  80078c:	980f883a 	mov	r7,r19
  800790:	103ee83a 	callr	r2
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  800794:	a4001026 	beq	r20,r16,8007d8 <alt_onchip_flash_write+0x130>
  800798:	10000f1e 	bne	r2,zero,8007d8 <alt_onchip_flash_write+0x130>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
                    offset = current_offset + flash->dev.region_info[i].block_size;
  80079c:	ac400017 	ldw	r17,0(r21)
                    if ((length == data_to_write) || ret_code)
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  8007a0:	a429c83a 	sub	r20,r20,r16
                    offset = current_offset + flash->dev.region_info[i].block_size;
                    src_addr = (alt_u8*)src_addr + data_to_write;
  8007a4:	9c27883a 	add	r19,r19,r16
                    {
                        goto finished;
                    }

                    length -= data_to_write;
                    offset = current_offset + flash->dev.region_info[i].block_size;
  8007a8:	e463883a 	add	r17,fp,r17
                    src_addr = (alt_u8*)src_addr + data_to_write;
                }
                current_offset += flash->dev.region_info[i].block_size;
  8007ac:	a8800017 	ldw	r2,0(r21)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  8007b0:	b5800044 	addi	r22,r22,1

                    length -= data_to_write;
                    offset = current_offset + flash->dev.region_info[i].block_size;
                    src_addr = (alt_u8*)src_addr + data_to_write;
                }
                current_offset += flash->dev.region_info[i].block_size;
  8007b4:	e0b9883a 	add	fp,fp,r2
  8007b8:	003fdb06 	br	800728 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7728>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  8007bc:	d8c00117 	ldw	r3,4(sp)
  8007c0:	ad400404 	addi	r21,r21,16
  8007c4:	18c00044 	addi	r3,r3,1
  8007c8:	d8c00115 	stw	r3,4(sp)
  8007cc:	003fcd06 	br	800704 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7704>
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  8007d0:	a43ff21e 	bne	r20,r16,80079c <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f779c>
    int         full_length = length;
    int         start_offset = offset;
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  8007d4:	0005883a 	mov	r2,zero
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  8007d8:	b9000a17 	ldw	r4,40(r23)
  8007dc:	d9400217 	ldw	r5,8(sp)
  8007e0:	d8800315 	stw	r2,12(sp)
  8007e4:	2489883a 	add	r4,r4,r18
  8007e8:	0800da00 	call	800da0 <alt_dcache_flush>
    return ret_code;
  8007ec:	d8800317 	ldw	r2,12(sp)
  8007f0:	00000106 	br	8007f8 <alt_onchip_flash_write+0x150>
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
    {
        return -EFAULT;
  8007f4:	00bffc84 	movi	r2,-14
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
    return ret_code;
}
  8007f8:	dfc00d17 	ldw	ra,52(sp)
  8007fc:	df000c17 	ldw	fp,48(sp)
  800800:	ddc00b17 	ldw	r23,44(sp)
  800804:	dd800a17 	ldw	r22,40(sp)
  800808:	dd400917 	ldw	r21,36(sp)
  80080c:	dd000817 	ldw	r20,32(sp)
  800810:	dcc00717 	ldw	r19,28(sp)
  800814:	dc800617 	ldw	r18,24(sp)
  800818:	dc400517 	ldw	r17,20(sp)
  80081c:	dc000417 	ldw	r16,16(sp)
  800820:	dec00e04 	addi	sp,sp,56
  800824:	f800283a 	ret

00800828 <altera_onchip_flash_init>:

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];

    if (flash->csr_base != NULL) {
  800828:	20802f17 	ldw	r2,188(r4)
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  80082c:	defff704 	addi	sp,sp,-36
  800830:	dc800215 	stw	r18,8(sp)
  800834:	dc000015 	stw	r16,0(sp)
  800838:	dfc00815 	stw	ra,32(sp)
  80083c:	ddc00715 	stw	r23,28(sp)
  800840:	dd800615 	stw	r22,24(sp)
  800844:	dd400515 	stw	r21,20(sp)
  800848:	dd000415 	stw	r20,16(sp)
  80084c:	dcc00315 	stw	r19,12(sp)
  800850:	dc400115 	stw	r17,4(sp)
  800854:	2021883a 	mov	r16,r4
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
    region_info = &flash->dev.region_info[0];
  800858:	24800d04 	addi	r18,r4,52

    if (flash->csr_base != NULL) {
  80085c:	10000b26 	beq	r2,zero,80088c <altera_onchip_flash_init+0x64>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  800860:	10c00037 	ldwio	r3,0(r2)
  800864:	18c0080c 	andi	r3,r3,32
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  800868:	15800037 	ldwio	r22,0(r2)
  80086c:	b580100c 	andi	r22,r22,64
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  800870:	15000037 	ldwio	r20,0(r2)
  800874:	a500200c 	andi	r20,r20,128
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  800878:	14c00037 	ldwio	r19,0(r2)
  80087c:	9cc0400c 	andi	r19,r19,256
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  800880:	15400037 	ldwio	r21,0(r2)
  800884:	ad40800c 	andi	r21,r21,512
  800888:	00000506 	br	8008a0 <altera_onchip_flash_init+0x78>
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  80088c:	002b883a 	mov	r21,zero
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  800890:	0027883a 	mov	r19,zero
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  800894:	0029883a 	mov	r20,zero
{
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  800898:	002d883a 	mov	r22,zero
)
{
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  80089c:	0007883a 	mov	r3,zero
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  8008a0:	84403017 	ldw	r17,192(r16)
  8008a4:	00800044 	movi	r2,1
  8008a8:	88800d1e 	bne	r17,r2,8008e0 <altera_onchip_flash_init+0xb8>
  8008ac:	18000c1e 	bne	r3,zero,8008e0 <altera_onchip_flash_init+0xb8>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  8008b0:	81003117 	ldw	r4,196(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  8008b4:	80803217 	ldw	r2,200(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8008b8:	85c03f17 	ldw	r23,252(r16)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  8008bc:	81000d15 	stw	r4,52(r16)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  8008c0:	1109c83a 	sub	r4,r2,r4
  8008c4:	21000044 	addi	r4,r4,1
  8008c8:	81000e15 	stw	r4,56(r16)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8008cc:	b80b883a 	mov	r5,r23
  8008d0:	080115c0 	call	80115c <__divsi3>
  8008d4:	80800f15 	stw	r2,60(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  8008d8:	85c01015 	stw	r23,64(r16)
  8008dc:	00000106 	br	8008e4 <altera_onchip_flash_init+0xbc>
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  8008e0:	0023883a 	mov	r17,zero
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  8008e4:	80c03317 	ldw	r3,204(r16)
  8008e8:	00800044 	movi	r2,1
  8008ec:	1880111e 	bne	r3,r2,800934 <altera_onchip_flash_init+0x10c>
  8008f0:	b000101e 	bne	r22,zero,800934 <altera_onchip_flash_init+0x10c>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  8008f4:	81003417 	ldw	r4,208(r16)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  8008f8:	80803517 	ldw	r2,212(r16)
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  8008fc:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800900:	85c03f17 	ldw	r23,252(r16)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  800904:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  800908:	90ed883a 	add	r22,r18,r3
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  80090c:	10800044 	addi	r2,r2,1
  800910:	b0800115 	stw	r2,4(r22)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800914:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  800918:	b1000015 	stw	r4,0(r22)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  80091c:	19000e17 	ldw	r4,56(r3)
  800920:	b80b883a 	mov	r5,r23
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
  800924:	8c400044 	addi	r17,r17,1

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector2_start_addr;
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800928:	080115c0 	call	80115c <__divsi3>
  80092c:	b0800215 	stw	r2,8(r22)
        region_info[number_of_regions].block_size = flash->page_size;
  800930:	b5c00315 	stw	r23,12(r22)

        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  800934:	80c03617 	ldw	r3,216(r16)
  800938:	00800044 	movi	r2,1
  80093c:	1880111e 	bne	r3,r2,800984 <altera_onchip_flash_init+0x15c>
  800940:	a000101e 	bne	r20,zero,800984 <altera_onchip_flash_init+0x15c>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  800944:	81003717 	ldw	r4,220(r16)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  800948:	80803817 	ldw	r2,224(r16)
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  80094c:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800950:	85803f17 	ldw	r22,252(r16)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  800954:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  800958:	90e9883a 	add	r20,r18,r3
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  80095c:	10800044 	addi	r2,r2,1
  800960:	a0800115 	stw	r2,4(r20)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800964:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  800968:	a1000015 	stw	r4,0(r20)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  80096c:	19000e17 	ldw	r4,56(r3)
  800970:	b00b883a 	mov	r5,r22
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
  800974:	8c400044 	addi	r17,r17,1

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector3_start_addr;
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800978:	080115c0 	call	80115c <__divsi3>
  80097c:	a0800215 	stw	r2,8(r20)
        region_info[number_of_regions].block_size = flash->page_size;
  800980:	a5800315 	stw	r22,12(r20)

        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  800984:	80c03917 	ldw	r3,228(r16)
  800988:	00800044 	movi	r2,1
  80098c:	1880111e 	bne	r3,r2,8009d4 <altera_onchip_flash_init+0x1ac>
  800990:	9800101e 	bne	r19,zero,8009d4 <altera_onchip_flash_init+0x1ac>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  800994:	81003a17 	ldw	r4,232(r16)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  800998:	80803b17 	ldw	r2,236(r16)
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  80099c:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8009a0:	85003f17 	ldw	r20,252(r16)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  8009a4:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  8009a8:	90e7883a 	add	r19,r18,r3
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  8009ac:	10800044 	addi	r2,r2,1
  8009b0:	98800115 	stw	r2,4(r19)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8009b4:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  8009b8:	99000015 	stw	r4,0(r19)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8009bc:	19000e17 	ldw	r4,56(r3)
  8009c0:	a00b883a 	mov	r5,r20
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
  8009c4:	8c400044 	addi	r17,r17,1

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector4_start_addr;
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8009c8:	080115c0 	call	80115c <__divsi3>
  8009cc:	98800215 	stw	r2,8(r19)
        region_info[number_of_regions].block_size = flash->page_size;
  8009d0:	9d000315 	stw	r20,12(r19)

        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  8009d4:	80c03c17 	ldw	r3,240(r16)
  8009d8:	00800044 	movi	r2,1
  8009dc:	1880111e 	bne	r3,r2,800a24 <altera_onchip_flash_init+0x1fc>
  8009e0:	a800101e 	bne	r21,zero,800a24 <altera_onchip_flash_init+0x1fc>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  8009e4:	81003d17 	ldw	r4,244(r16)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  8009e8:	80803e17 	ldw	r2,248(r16)
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  8009ec:	8806913a 	slli	r3,r17,4
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8009f0:	84c03f17 	ldw	r19,252(r16)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  8009f4:	1105c83a 	sub	r2,r2,r4
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  8009f8:	90e5883a 	add	r18,r18,r3
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  8009fc:	10800044 	addi	r2,r2,1
  800a00:	90800115 	stw	r2,4(r18)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800a04:	80c7883a 	add	r3,r16,r3
        number_of_regions++;
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  800a08:	91000015 	stw	r4,0(r18)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800a0c:	19000e17 	ldw	r4,56(r3)
  800a10:	980b883a 	mov	r5,r19
        region_info[number_of_regions].block_size = flash->page_size;

        number_of_regions++;
  800a14:	8c400044 	addi	r17,r17,1

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {

        region_info[number_of_regions].offset = flash->sector5_start_addr;
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  800a18:	080115c0 	call	80115c <__divsi3>
  800a1c:	90800215 	stw	r2,8(r18)
        region_info[number_of_regions].block_size = flash->page_size;
  800a20:	94c00315 	stw	r19,12(r18)

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  800a24:	01402034 	movhi	r5,128
  800a28:	8009883a 	mov	r4,r16
  800a2c:	2944ef04 	addi	r5,r5,5052

        number_of_regions++;
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  800a30:	84400c15 	stw	r17,48(r16)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
}
  800a34:	dfc00817 	ldw	ra,32(sp)
  800a38:	ddc00717 	ldw	r23,28(sp)
  800a3c:	dd800617 	ldw	r22,24(sp)
  800a40:	dd400517 	ldw	r21,20(sp)
  800a44:	dd000417 	ldw	r20,16(sp)
  800a48:	dcc00317 	ldw	r19,12(sp)
  800a4c:	dc800217 	ldw	r18,8(sp)
  800a50:	dc400117 	ldw	r17,4(sp)
  800a54:	dc000017 	ldw	r16,0(sp)
  800a58:	dec00904 	addi	sp,sp,36
  800a5c:	0800da81 	jmpi	800da8 <alt_dev_llist_insert>

00800a60 <alt_onchip_flash_poll_for_status_to_go_idle>:
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  800a60:	00c17db4 	movhi	r3,1526
  800a64:	18f84004 	addi	r3,r3,-7936
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  800a68:	20802f17 	ldw	r2,188(r4)
  800a6c:	10800037 	ldwio	r2,0(r2)
  800a70:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  800a74:	10000426 	beq	r2,zero,800a88 <alt_onchip_flash_poll_for_status_to_go_idle+0x28>
  800a78:	18ffffc4 	addi	r3,r3,-1
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
  800a7c:	183ffa1e 	bne	r3,zero,800a68 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7a68>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  800a80:	00bfe304 	movi	r2,-116
            }
        }
    }

    return ret_code;
}
  800a84:	f800283a 	ret
  800a88:	f800283a 	ret

00800a8c <alt_onchip_flash_poll_for_status_erase_passed>:
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  800a8c:	00c17db4 	movhi	r3,1526
  800a90:	18f84004 	addi	r3,r3,-7936
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  800a94:	20802f17 	ldw	r2,188(r4)
  800a98:	10800037 	ldwio	r2,0(r2)
  800a9c:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  800aa0:	1000041e 	bne	r2,zero,800ab4 <alt_onchip_flash_poll_for_status_erase_passed+0x28>
  800aa4:	18ffffc4 	addi	r3,r3,-1
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
  800aa8:	183ffa1e 	bne	r3,zero,800a94 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7a94>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  800aac:	00bfe304 	movi	r2,-116
            }
        }
    }

    return ret_code;
}
  800ab0:	f800283a 	ret
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
  800ab4:	0005883a 	mov	r2,zero
  800ab8:	f800283a 	ret

00800abc <alt_onchip_flash_erase_block>:
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  800abc:	20800b17 	ldw	r2,44(r4)
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  800ac0:	defffd04 	addi	sp,sp,-12
  800ac4:	dc400115 	stw	r17,4(sp)
  800ac8:	dfc00215 	stw	ra,8(sp)
  800acc:	dc000015 	stw	r16,0(sp)
  800ad0:	2023883a 	mov	r17,r4
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  800ad4:	28802a0e 	bge	r5,r2,800b80 <alt_onchip_flash_erase_block+0xc4>
        return -EFAULT;
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  800ad8:	20802f17 	ldw	r2,188(r4)
  800adc:	10002a26 	beq	r2,zero,800b88 <alt_onchip_flash_erase_block+0xcc>
  800ae0:	20802e17 	ldw	r2,184(r4)
  800ae4:	1000281e 	bne	r2,zero,800b88 <alt_onchip_flash_erase_block+0xcc>
        return -ENODEV;
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  800ae8:	20803f17 	ldw	r2,252(r4)
  800aec:	10bfffc4 	addi	r2,r2,-1
  800af0:	2884703a 	and	r2,r5,r2
  800af4:	1000261e 	bne	r2,zero,800b90 <alt_onchip_flash_erase_block+0xd4>
  800af8:	2821883a 	mov	r16,r5
        /* The address is not aligned */
        return -EINVAL;
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  800afc:	0800a600 	call	800a60 <alt_onchip_flash_poll_for_status_to_go_idle>
    if (ret_code != 0)
  800b00:	1000241e 	bne	r2,zero,800b94 <alt_onchip_flash_erase_block+0xd8>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  800b04:	88802f17 	ldw	r2,188(r17)
  800b08:	10800104 	addi	r2,r2,4
  800b0c:	10c00037 	ldwio	r3,0(r2)
  800b10:	193c002c 	andhi	r4,r3,61440
  800b14:	00c02034 	movhi	r3,128
  800b18:	18ffffc4 	addi	r3,r3,-1
  800b1c:	20c6b03a 	or	r3,r4,r3
  800b20:	10c00035 	stwio	r3,0(r2)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  800b24:	88c02f17 	ldw	r3,188(r17)
  800b28:	18c00104 	addi	r3,r3,4
  800b2c:	18800037 	ldwio	r2,0(r3)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  800b30:	800b883a 	mov	r5,r16
  800b34:	8000010e 	bge	r16,zero,800b3c <alt_onchip_flash_erase_block+0x80>
  800b38:	814000c4 	addi	r5,r16,3
  800b3c:	280bd0ba 	srai	r5,r5,2

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  800b40:	10bc002c 	andhi	r2,r2,61440
  800b44:	29401c34 	orhi	r5,r5,112
  800b48:	288ab03a 	or	r5,r5,r2
  800b4c:	19400035 	stwio	r5,0(r3)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  800b50:	8809883a 	mov	r4,r17
  800b54:	0800a600 	call	800a60 <alt_onchip_flash_poll_for_status_to_go_idle>

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  800b58:	8809883a 	mov	r4,r17
  800b5c:	0800a8c0 	call	800a8c <alt_onchip_flash_poll_for_status_erase_passed>

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  800b60:	88c02f17 	ldw	r3,188(r17)
  800b64:	18c00104 	addi	r3,r3,4
  800b68:	19400037 	ldwio	r5,0(r3)
  800b6c:	01040034 	movhi	r4,4096
  800b70:	213fffc4 	addi	r4,r4,-1
  800b74:	2908b03a 	or	r4,r5,r4
  800b78:	19000035 	stwio	r4,0(r3)

    return ret_code;
  800b7c:	00000506 	br	800b94 <alt_onchip_flash_erase_block+0xd8>
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
        return -EFAULT;
  800b80:	00bffc84 	movi	r2,-14
  800b84:	00000306 	br	800b94 <alt_onchip_flash_erase_block+0xd8>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
        return -ENODEV;
  800b88:	00bffb44 	movi	r2,-19
  800b8c:	00000106 	br	800b94 <alt_onchip_flash_erase_block+0xd8>

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
    {
        /* The address is not aligned */
        return -EINVAL;
  800b90:	00bffa84 	movi	r2,-22

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
  800b94:	dfc00217 	ldw	ra,8(sp)
  800b98:	dc400117 	ldw	r17,4(sp)
  800b9c:	dc000017 	ldw	r16,0(sp)
  800ba0:	dec00304 	addi	sp,sp,12
  800ba4:	f800283a 	ret

00800ba8 <alt_onchip_flash_poll_for_status_write_passed>:
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  800ba8:	00c17db4 	movhi	r3,1526
  800bac:	18f84004 	addi	r3,r3,-7936
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  800bb0:	20802f17 	ldw	r2,188(r4)
  800bb4:	10800037 	ldwio	r2,0(r2)
  800bb8:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  800bbc:	1000041e 	bne	r2,zero,800bd0 <alt_onchip_flash_poll_for_status_write_passed+0x28>
  800bc0:	18ffffc4 	addi	r3,r3,-1
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
            count_down--;
            if (count_down == 0) {
  800bc4:	183ffa1e 	bne	r3,zero,800bb0 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7bb0>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  800bc8:	00bfe304 	movi	r2,-116
            }
        }
    }

    return ret_code;
}
  800bcc:	f800283a 	ret
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
    int ret_code = 0;
  800bd0:	0005883a 	mov	r2,zero
  800bd4:	f800283a 	ret

00800bd8 <alt_onchip_flash_write_block>:
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  800bd8:	20800b17 	ldw	r2,44(r4)
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  800bdc:	defff204 	addi	sp,sp,-56
  800be0:	dcc00715 	stw	r19,28(sp)
  800be4:	dc800615 	stw	r18,24(sp)
  800be8:	dfc00d15 	stw	ra,52(sp)
  800bec:	df000c15 	stw	fp,48(sp)
  800bf0:	ddc00b15 	stw	r23,44(sp)
  800bf4:	dd800a15 	stw	r22,40(sp)
  800bf8:	dd400915 	stw	r21,36(sp)
  800bfc:	dd000815 	stw	r20,32(sp)
  800c00:	dc400515 	stw	r17,20(sp)
  800c04:	dc000415 	stw	r16,16(sp)
  800c08:	2027883a 	mov	r19,r4
  800c0c:	dc800e17 	ldw	r18,56(sp)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
  800c10:	2880520e 	bge	r5,r2,800d5c <alt_onchip_flash_write_block+0x184>
  800c14:	3023883a 	mov	r17,r6
        (block_offset >= flash->dev.length) ||
  800c18:	3080500e 	bge	r6,r2,800d5c <alt_onchip_flash_write_block+0x184>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
  800c1c:	1185c83a 	sub	r2,r2,r6
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  800c20:	14804e16 	blt	r2,r18,800d5c <alt_onchip_flash_write_block+0x184>
    ) {
        return -EFAULT;
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  800c24:	20802f17 	ldw	r2,188(r4)
  800c28:	10004e26 	beq	r2,zero,800d64 <alt_onchip_flash_write_block+0x18c>
  800c2c:	20802e17 	ldw	r2,184(r4)
  800c30:	10004c1e 	bne	r2,zero,800d64 <alt_onchip_flash_write_block+0x18c>
  800c34:	382f883a 	mov	r23,r7
        return -ENODEV;
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  800c38:	0800a600 	call	800a60 <alt_onchip_flash_poll_for_status_to_go_idle>
  800c3c:	1021883a 	mov	r16,r2
    if (ret_code != 0)
  800c40:	10004a1e 	bne	r2,zero,800d6c <alt_onchip_flash_write_block+0x194>
    {
        return ret_code;
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  800c44:	98802f17 	ldw	r2,188(r19)
  800c48:	10800104 	addi	r2,r2,4
  800c4c:	10c00037 	ldwio	r3,0(r2)
  800c50:	193c002c 	andhi	r4,r3,61440
  800c54:	00c02034 	movhi	r3,128
  800c58:	18ffffc4 	addi	r3,r3,-1
  800c5c:	20c6b03a 	or	r3,r4,r3
  800c60:	10c00035 	stwio	r3,0(r2)
    int           length
)
{
    int ret_code = 0;
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
    int buffer_offset = 0;
  800c64:	002b883a 	mov	r21,zero

    /* Check data length */
    while (length)
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  800c68:	073fffc4 	movi	fp,-1
  800c6c:	05bfff04 	movi	r22,-4

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
  800c70:	90003226 	beq	r18,zero,800d3c <alt_onchip_flash_write_block+0x164>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  800c74:	df000015 	stw	fp,0(sp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  800c78:	8d0000cc 	andi	r20,r17,3
  800c7c:	bd4b883a 	add	r5,r23,r21
  800c80:	a0000f1e 	bne	r20,zero,800cc0 <alt_onchip_flash_write_block+0xe8>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  800c84:	89c00104 	addi	r7,r17,4
  800c88:	3d8e703a 	and	r7,r7,r22
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  800c8c:	3c69c83a 	sub	r20,r7,r17
  800c90:	9500010e 	bge	r18,r20,800c98 <alt_onchip_flash_write_block+0xc0>
  800c94:	9029883a 	mov	r20,r18
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  800c98:	d809883a 	mov	r4,sp
  800c9c:	a00d883a 	mov	r6,r20
  800ca0:	d9c00315 	stw	r7,12(sp)
  800ca4:	08010ac0 	call	8010ac <memcpy>

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  800ca8:	d9c00317 	ldw	r7,12(sp)
  800cac:	8807883a 	mov	r3,r17
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
            buffer_offset += length_of_current_write;
  800cb0:	ad2b883a 	add	r21,r21,r20
            length -= length_of_current_write;
  800cb4:	9525c83a 	sub	r18,r18,r20

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  800cb8:	3823883a 	mov	r17,r7
  800cbc:	00001406 	br	800d10 <alt_onchip_flash_write_block+0x138>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  800cc0:	8d07c83a 	sub	r3,r17,r20
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  800cc4:	1c400104 	addi	r17,r3,4
  800cc8:	8da2703a 	and	r17,r17,r22
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  800ccc:	9505883a 	add	r2,r18,r20
  800cd0:	88cfc83a 	sub	r7,r17,r3
  800cd4:	11c0010e 	bge	r2,r7,800cdc <alt_onchip_flash_write_block+0x104>
  800cd8:	100f883a 	mov	r7,r2
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  800cdc:	3d11c83a 	sub	r8,r7,r20
  800ce0:	dd09883a 	add	r4,sp,r20
  800ce4:	400d883a 	mov	r6,r8
  800ce8:	d8c00115 	stw	r3,4(sp)
  800cec:	d9c00315 	stw	r7,12(sp)
  800cf0:	da000215 	stw	r8,8(sp)
  800cf4:	08010ac0 	call	8010ac <memcpy>
            buffer_offset += length_of_current_write - padding;
            length -= length_of_current_write - padding;
  800cf8:	d9c00317 	ldw	r7,12(sp)
            current_data_offset = current_data_offset - padding;
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
            buffer_offset += length_of_current_write - padding;
  800cfc:	da000217 	ldw	r8,8(sp)
            length -= length_of_current_write - padding;
  800d00:	d8c00117 	ldw	r3,4(sp)
  800d04:	a1e9c83a 	sub	r20,r20,r7
            current_data_offset = current_data_offset - padding;
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
            buffer_offset += length_of_current_write - padding;
  800d08:	aa2b883a 	add	r21,r21,r8
            length -= length_of_current_write - padding;
  800d0c:	9525883a 	add	r18,r18,r20
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  800d10:	98800a17 	ldw	r2,40(r19)
  800d14:	10c7883a 	add	r3,r2,r3
  800d18:	d8800017 	ldw	r2,0(sp)
  800d1c:	18800035 	stwio	r2,0(r3)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  800d20:	9809883a 	mov	r4,r19
  800d24:	0800a600 	call	800a60 <alt_onchip_flash_poll_for_status_to_go_idle>
        if (ret_code != 0)
  800d28:	1000031e 	bne	r2,zero,800d38 <alt_onchip_flash_write_block+0x160>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  800d2c:	9809883a 	mov	r4,r19
  800d30:	0800ba80 	call	800ba8 <alt_onchip_flash_poll_for_status_write_passed>
        if (ret_code != 0)
  800d34:	103fce26 	beq	r2,zero,800c70 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7c70>
  800d38:	1021883a 	mov	r16,r2
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  800d3c:	98802f17 	ldw	r2,188(r19)
  800d40:	10800104 	addi	r2,r2,4
  800d44:	11000037 	ldwio	r4,0(r2)
  800d48:	00c40034 	movhi	r3,4096
  800d4c:	18ffffc4 	addi	r3,r3,-1
  800d50:	20c6b03a 	or	r3,r4,r3
  800d54:	10c00035 	stwio	r3,0(r2)
  800d58:	00000406 	br	800d6c <alt_onchip_flash_write_block+0x194>
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
  800d5c:	00bffc84 	movi	r2,-14
  800d60:	00000306 	br	800d70 <alt_onchip_flash_write_block+0x198>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
        return -ENODEV;
  800d64:	00bffb44 	movi	r2,-19
  800d68:	00000106 	br	800d70 <alt_onchip_flash_write_block+0x198>
  800d6c:	8005883a 	mov	r2,r16

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    return ret_code;
}
  800d70:	dfc00d17 	ldw	ra,52(sp)
  800d74:	df000c17 	ldw	fp,48(sp)
  800d78:	ddc00b17 	ldw	r23,44(sp)
  800d7c:	dd800a17 	ldw	r22,40(sp)
  800d80:	dd400917 	ldw	r21,36(sp)
  800d84:	dd000817 	ldw	r20,32(sp)
  800d88:	dcc00717 	ldw	r19,28(sp)
  800d8c:	dc800617 	ldw	r18,24(sp)
  800d90:	dc400517 	ldw	r17,20(sp)
  800d94:	dc000417 	ldw	r16,16(sp)
  800d98:	dec00e04 	addi	sp,sp,56
  800d9c:	f800283a 	ret

00800da0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  800da0:	f800283a 	ret

00800da4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  800da4:	f800283a 	ret

00800da8 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  800da8:	20000226 	beq	r4,zero,800db4 <alt_dev_llist_insert+0xc>
  800dac:	20800217 	ldw	r2,8(r4)
  800db0:	1000131e 	bne	r2,zero,800e00 <alt_dev_llist_insert+0x58>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  800db4:	00802034 	movhi	r2,128
  800db8:	1084ee04 	addi	r2,r2,5048
  800dbc:	10800017 	ldw	r2,0(r2)
  800dc0:	10000926 	beq	r2,zero,800de8 <alt_dev_llist_insert+0x40>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  800dc4:	deffff04 	addi	sp,sp,-4
  800dc8:	dfc00015 	stw	ra,0(sp)
  800dcc:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  800dd0:	00c00584 	movi	r3,22
  800dd4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  800dd8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  800ddc:	dfc00017 	ldw	ra,0(sp)
  800de0:	dec00104 	addi	sp,sp,4
  800de4:	f800283a 	ret
  800de8:	00802034 	movhi	r2,128
  800dec:	10854f04 	addi	r2,r2,5436
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  800df0:	00c00584 	movi	r3,22
  800df4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  800df8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  800dfc:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  800e00:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  800e04:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  800e08:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  800e0c:	28800017 	ldw	r2,0(r5)
  800e10:	11000115 	stw	r4,4(r2)
  list->next           = entry;
  800e14:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  800e18:	0005883a 	mov	r2,zero
  800e1c:	f800283a 	ret

00800e20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  800e20:	defffb04 	addi	sp,sp,-20
  800e24:	dcc00315 	stw	r19,12(sp)
  800e28:	dc800215 	stw	r18,8(sp)
  800e2c:	dc400115 	stw	r17,4(sp)
  800e30:	dc000015 	stw	r16,0(sp)
  800e34:	dfc00415 	stw	ra,16(sp)
  800e38:	2027883a 	mov	r19,r4
  800e3c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
  800e40:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
  800e44:	08010d40 	call	8010d4 <strlen>
  800e48:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  800e4c:	84400726 	beq	r16,r17,800e6c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  800e50:	81000217 	ldw	r4,8(r16)
  800e54:	980b883a 	mov	r5,r19
  800e58:	900d883a 	mov	r6,r18
  800e5c:	080107c0 	call	80107c <memcmp>
  800e60:	10000426 	beq	r2,zero,800e74 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  800e64:	84000017 	ldw	r16,0(r16)
  800e68:	003ff806 	br	800e4c <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f7e4c>
  }
  
  /* No match found */
  
  return NULL;
  800e6c:	0005883a 	mov	r2,zero
  800e70:	00000106 	br	800e78 <alt_find_dev+0x58>
  800e74:	8005883a 	mov	r2,r16
}
  800e78:	dfc00417 	ldw	ra,16(sp)
  800e7c:	dcc00317 	ldw	r19,12(sp)
  800e80:	dc800217 	ldw	r18,8(sp)
  800e84:	dc400117 	ldw	r17,4(sp)
  800e88:	dc000017 	ldw	r16,0(sp)
  800e8c:	dec00504 	addi	sp,sp,20
  800e90:	f800283a 	ret

00800e94 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  800e94:	defffe04 	addi	sp,sp,-8
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  800e98:	d1600604 	addi	r5,gp,-32744
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  800e9c:	dc000015 	stw	r16,0(sp)
  800ea0:	dfc00115 	stw	ra,4(sp)
  800ea4:	2021883a 	mov	r16,r4
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  800ea8:	0800e200 	call	800e20 <alt_find_dev>

  if ((dev) && dev->open)
  800eac:	10000826 	beq	r2,zero,800ed0 <alt_flash_open_dev+0x3c>
  800eb0:	10c00317 	ldw	r3,12(r2)
  800eb4:	18000726 	beq	r3,zero,800ed4 <alt_flash_open_dev+0x40>
  {
    return dev->open(dev, name);
  800eb8:	1009883a 	mov	r4,r2
  800ebc:	800b883a 	mov	r5,r16
  }

  return dev;
}
  800ec0:	dfc00117 	ldw	ra,4(sp)
  800ec4:	dc000017 	ldw	r16,0(sp)
  800ec8:	dec00204 	addi	sp,sp,8
{
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);

  if ((dev) && dev->open)
  {
    return dev->open(dev, name);
  800ecc:	1800683a 	jmp	r3
  800ed0:	0005883a 	mov	r2,zero
  }

  return dev;
}
  800ed4:	dfc00117 	ldw	ra,4(sp)
  800ed8:	dc000017 	ldw	r16,0(sp)
  800edc:	dec00204 	addi	sp,sp,8
  800ee0:	f800283a 	ret

00800ee4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  if (fd && fd->close)
  800ee4:	20000326 	beq	r4,zero,800ef4 <alt_flash_close_dev+0x10>
  800ee8:	20800417 	ldw	r2,16(r4)
  800eec:	10000126 	beq	r2,zero,800ef4 <alt_flash_close_dev+0x10>
  {
    fd->close(fd);
  800ef0:	1000683a 	jmp	r2
  800ef4:	f800283a 	ret

00800ef8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  800ef8:	f800283a 	ret

00800efc <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  800efc:	0800f981 	jmpi	800f98 <alt_iic_isr_register>

00800f00 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800f00:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800f04:	00bfff84 	movi	r2,-2
  800f08:	3084703a 	and	r2,r6,r2
  800f0c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  800f10:	00802034 	movhi	r2,128
  800f14:	10854d04 	addi	r2,r2,5428
  800f18:	01000044 	movi	r4,1
  800f1c:	10c00017 	ldw	r3,0(r2)
  800f20:	214a983a 	sll	r5,r4,r5
  800f24:	28cab03a 	or	r5,r5,r3
  800f28:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800f2c:	10800017 	ldw	r2,0(r2)
  800f30:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800f34:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  800f38:	0005883a 	mov	r2,zero
  800f3c:	f800283a 	ret

00800f40 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800f40:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800f44:	00bfff84 	movi	r2,-2
  800f48:	3084703a 	and	r2,r6,r2
  800f4c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  800f50:	00802034 	movhi	r2,128
  800f54:	10854d04 	addi	r2,r2,5428
  800f58:	013fff84 	movi	r4,-2
  800f5c:	10c00017 	ldw	r3,0(r2)
  800f60:	214a183a 	rol	r5,r4,r5
  800f64:	28ca703a 	and	r5,r5,r3
  800f68:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800f6c:	10800017 	ldw	r2,0(r2)
  800f70:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800f74:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  800f78:	0005883a 	mov	r2,zero
  800f7c:	f800283a 	ret

00800f80 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  800f80:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
  800f84:	00c00044 	movi	r3,1
  800f88:	194a983a 	sll	r5,r3,r5
  800f8c:	1144703a 	and	r2,r2,r5
}
  800f90:	1004c03a 	cmpne	r2,r2,zero
  800f94:	f800283a 	ret

00800f98 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  800f98:	00c007c4 	movi	r3,31
  800f9c:	19401616 	blt	r3,r5,800ff8 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  800fa0:	defffe04 	addi	sp,sp,-8
  800fa4:	dfc00115 	stw	ra,4(sp)
  800fa8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800fac:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800fb0:	00ffff84 	movi	r3,-2
  800fb4:	80c6703a 	and	r3,r16,r3
  800fb8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  800fbc:	280490fa 	slli	r2,r5,3
  800fc0:	00c02034 	movhi	r3,128
  800fc4:	18c55004 	addi	r3,r3,5440
  800fc8:	1885883a 	add	r2,r3,r2
  800fcc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
  800fd0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  800fd4:	30000226 	beq	r6,zero,800fe0 <alt_iic_isr_register+0x48>
  800fd8:	0800f000 	call	800f00 <alt_ic_irq_enable>
  800fdc:	00000106 	br	800fe4 <alt_iic_isr_register+0x4c>
  800fe0:	0800f400 	call	800f40 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800fe4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  800fe8:	dfc00117 	ldw	ra,4(sp)
  800fec:	dc000017 	ldw	r16,0(sp)
  800ff0:	dec00204 	addi	sp,sp,8
  800ff4:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
  800ff8:	00bffa84 	movi	r2,-22
  800ffc:	f800283a 	ret

00801000 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  801000:	000170fa 	wrctl	ienable,zero
  801004:	f800283a 	ret

00801008 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
  801008:	213ffe84 	addi	r4,r4,-6
  80100c:	008003c4 	movi	r2,15
  801010:	11001636 	bltu	r2,r4,80106c <alt_exception_cause_generated_bad_addr+0x64>
  801014:	200890ba 	slli	r4,r4,2
  801018:	00802034 	movhi	r2,128
  80101c:	10840b04 	addi	r2,r2,4140
  801020:	2089883a 	add	r4,r4,r2
  801024:	20800017 	ldw	r2,0(r4)
  801028:	1000683a 	jmp	r2
  80102c:	00801074 	movhi	r2,65
  801030:	00801074 	movhi	r2,65
  801034:	0080106c 	andhi	r2,zero,65
  801038:	0080106c 	andhi	r2,zero,65
  80103c:	0080106c 	andhi	r2,zero,65
  801040:	00801074 	movhi	r2,65
  801044:	0080106c 	andhi	r2,zero,65
  801048:	0080106c 	andhi	r2,zero,65
  80104c:	00801074 	movhi	r2,65
  801050:	00801074 	movhi	r2,65
  801054:	0080106c 	andhi	r2,zero,65
  801058:	00801074 	movhi	r2,65
  80105c:	0080106c 	andhi	r2,zero,65
  801060:	0080106c 	andhi	r2,zero,65
  801064:	0080106c 	andhi	r2,zero,65
  801068:	00801074 	movhi	r2,65
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80106c:	0005883a 	mov	r2,zero
  801070:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  801074:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
  801078:	f800283a 	ret

0080107c <memcmp>:
  80107c:	218d883a 	add	r6,r4,r6
  801080:	21800826 	beq	r4,r6,8010a4 <memcmp+0x28>
  801084:	20800003 	ldbu	r2,0(r4)
  801088:	28c00003 	ldbu	r3,0(r5)
  80108c:	10c00226 	beq	r2,r3,801098 <memcmp+0x1c>
  801090:	10c5c83a 	sub	r2,r2,r3
  801094:	f800283a 	ret
  801098:	21000044 	addi	r4,r4,1
  80109c:	29400044 	addi	r5,r5,1
  8010a0:	003ff706 	br	801080 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f8080>
  8010a4:	0005883a 	mov	r2,zero
  8010a8:	f800283a 	ret

008010ac <memcpy>:
  8010ac:	2005883a 	mov	r2,r4
  8010b0:	0007883a 	mov	r3,zero
  8010b4:	19800626 	beq	r3,r6,8010d0 <memcpy+0x24>
  8010b8:	28c9883a 	add	r4,r5,r3
  8010bc:	21c00003 	ldbu	r7,0(r4)
  8010c0:	10c9883a 	add	r4,r2,r3
  8010c4:	18c00044 	addi	r3,r3,1
  8010c8:	21c00005 	stb	r7,0(r4)
  8010cc:	003ff906 	br	8010b4 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f80b4>
  8010d0:	f800283a 	ret

008010d4 <strlen>:
  8010d4:	2005883a 	mov	r2,r4
  8010d8:	10c00007 	ldb	r3,0(r2)
  8010dc:	18000226 	beq	r3,zero,8010e8 <strlen+0x14>
  8010e0:	10800044 	addi	r2,r2,1
  8010e4:	003ffc06 	br	8010d8 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f80d8>
  8010e8:	1105c83a 	sub	r2,r2,r4
  8010ec:	f800283a 	ret

008010f0 <udivmodsi4>:
  8010f0:	2900182e 	bgeu	r5,r4,801154 <udivmodsi4+0x64>
  8010f4:	28001716 	blt	r5,zero,801154 <udivmodsi4+0x64>
  8010f8:	00800804 	movi	r2,32
  8010fc:	00c00044 	movi	r3,1
  801100:	00000206 	br	80110c <udivmodsi4+0x1c>
  801104:	10001126 	beq	r2,zero,80114c <udivmodsi4+0x5c>
  801108:	28000516 	blt	r5,zero,801120 <udivmodsi4+0x30>
  80110c:	294b883a 	add	r5,r5,r5
  801110:	10bfffc4 	addi	r2,r2,-1
  801114:	18c7883a 	add	r3,r3,r3
  801118:	293ffa36 	bltu	r5,r4,801104 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f8104>
  80111c:	18000b26 	beq	r3,zero,80114c <udivmodsi4+0x5c>
  801120:	0005883a 	mov	r2,zero
  801124:	21400236 	bltu	r4,r5,801130 <udivmodsi4+0x40>
  801128:	2149c83a 	sub	r4,r4,r5
  80112c:	10c4b03a 	or	r2,r2,r3
  801130:	1806d07a 	srli	r3,r3,1
  801134:	280ad07a 	srli	r5,r5,1
  801138:	183ffa1e 	bne	r3,zero,801124 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f8124>
  80113c:	3000011e 	bne	r6,zero,801144 <udivmodsi4+0x54>
  801140:	f800283a 	ret
  801144:	2005883a 	mov	r2,r4
  801148:	f800283a 	ret
  80114c:	0005883a 	mov	r2,zero
  801150:	003ffa06 	br	80113c <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f813c>
  801154:	00c00044 	movi	r3,1
  801158:	003ff106 	br	801120 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f8120>

0080115c <__divsi3>:
  80115c:	defffe04 	addi	sp,sp,-8
  801160:	dfc00115 	stw	ra,4(sp)
  801164:	dc000015 	stw	r16,0(sp)
  801168:	20000b16 	blt	r4,zero,801198 <__divsi3+0x3c>
  80116c:	0021883a 	mov	r16,zero
  801170:	28000c16 	blt	r5,zero,8011a4 <__divsi3+0x48>
  801174:	000d883a 	mov	r6,zero
  801178:	08010f00 	call	8010f0 <udivmodsi4>
  80117c:	0407c83a 	sub	r3,zero,r16
  801180:	1884f03a 	xor	r2,r3,r2
  801184:	1405883a 	add	r2,r2,r16
  801188:	dfc00117 	ldw	ra,4(sp)
  80118c:	dc000017 	ldw	r16,0(sp)
  801190:	dec00204 	addi	sp,sp,8
  801194:	f800283a 	ret
  801198:	0109c83a 	sub	r4,zero,r4
  80119c:	04000044 	movi	r16,1
  8011a0:	283ff40e 	bge	r5,zero,801174 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f8174>
  8011a4:	014bc83a 	sub	r5,zero,r5
  8011a8:	8400005c 	xori	r16,r16,1
  8011ac:	003ff106 	br	801174 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f8174>

008011b0 <__modsi3>:
  8011b0:	defffd04 	addi	sp,sp,-12
  8011b4:	dfc00215 	stw	ra,8(sp)
  8011b8:	dc400115 	stw	r17,4(sp)
  8011bc:	dc000015 	stw	r16,0(sp)
  8011c0:	20000c16 	blt	r4,zero,8011f4 <__modsi3+0x44>
  8011c4:	0023883a 	mov	r17,zero
  8011c8:	0021883a 	mov	r16,zero
  8011cc:	28000d16 	blt	r5,zero,801204 <__modsi3+0x54>
  8011d0:	01800044 	movi	r6,1
  8011d4:	08010f00 	call	8010f0 <udivmodsi4>
  8011d8:	1404f03a 	xor	r2,r2,r16
  8011dc:	8885883a 	add	r2,r17,r2
  8011e0:	dfc00217 	ldw	ra,8(sp)
  8011e4:	dc400117 	ldw	r17,4(sp)
  8011e8:	dc000017 	ldw	r16,0(sp)
  8011ec:	dec00304 	addi	sp,sp,12
  8011f0:	f800283a 	ret
  8011f4:	0109c83a 	sub	r4,zero,r4
  8011f8:	04400044 	movi	r17,1
  8011fc:	043fffc4 	movi	r16,-1
  801200:	283ff30e 	bge	r5,zero,8011d0 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f81d0>
  801204:	014bc83a 	sub	r5,zero,r5
  801208:	003ff106 	br	8011d0 <__alt_mem_BeMicro_Max10_serial_flash_controller_0+0xff6f81d0>

0080120c <__udivsi3>:
  80120c:	000d883a 	mov	r6,zero
  801210:	08010f01 	jmpi	8010f0 <udivmodsi4>

00801214 <__umodsi3>:
  801214:	01800044 	movi	r6,1
  801218:	08010f01 	jmpi	8010f0 <udivmodsi4>
